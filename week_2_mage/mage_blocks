** Data Loader Block **

```
if 'data_loader' not in globals():
    from mage_ai.data_preparation.decorators import data_loader
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


import pandas as pd

@data_loader
def load_data(*args, **kwargs):

    dfs = []

    parse_dates = ['lpep_pickup_datetime', 'lpep_dropoff_datetime']

    for month in range (10, 13):

        file_name = f'/home/src/green_tripdata_2020-{month}.csv.gz'
        data = pd.read_csv(file_name, compression = 'gzip', parse_dates = parse_dates)
        dfs.append(data)

    final_data = pd.concat(dfs)

    return final_data
```

** Data transformation block **

``````
if 'transformer' not in globals():
    from mage_ai.data_preparation.decorators import transformer
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


@transformer
def transform(data, *args, **kwargs):
    
    # remove data where passenger count is = 0 or trip_distance is = 0
    data = (data[(data['passenger_count'] > 0) & (data['trip_distance'] > 0)])

    # create date column
    data['lpep_pickup_date'] = data['lpep_pickup_datetime'].dt.date

    data.columns = (data.columns
                    .str.replace(' ', '_')
                    .str.lower()
                    )

    return data


@test
def test_output(output, *args):
    assert 'vendorid' in output.columns, "Column vendorid does exist"

@test
def test_output(output, *args):
    assert (output['passenger_count'] > 0).all(), "All passenger counts are bigger than 0"

@test
def test_output(output, *args):
    assert (output['trip_distance'] > 0).all(), "All trip distances are bigger than 0"

```

** 1st Data Export Block **

```

from mage_ai.settings.repo import get_repo_path
from mage_ai.io.config import ConfigFileLoader
from mage_ai.io.postgres import Postgres
from pandas import DataFrame
from os import path

if 'data_exporter' not in globals():
    from mage_ai.data_preparation.decorators import data_exporter


@data_exporter
def export_data_to_postgres(df: DataFrame, **kwargs) -> None:
    """
    Template for exporting data to a PostgreSQL database.
    Specify your configuration settings in 'io_config.yaml'.

    Docs: https://docs.mage.ai/design/data-loading#postgresql
    """
    schema_name = 'mage'  # Specify the name of the schema to export data to
    table_name = 'green_taxi'  # Specify the name of the table to export data to
    config_path = path.join(get_repo_path(), 'io_config.yaml')
    config_profile = 'dev'

    with Postgres.with_config(ConfigFileLoader(config_path, config_profile)) as loader:
        loader.export(
            df,
            schema_name,
            table_name,
            index=False,  # Specifies whether to include index in exported table
            if_exists='replace',  # Specify resolution policy if table name already exists
        )

```

** 2nd Data Export Block **

```

import pyarrow as pa
import pyarrow.parquet as pq
import os

if 'data_exporter' not in globals():
    from mage_ai.data_preparation.decorators import data_exporter

os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = "/home/src/mage-zoomcamp-creds.json"

bucket_name = "mage-zoomcamp-arben-1"
table_name = "homework_taxi_green_partitioned"

root_path = f'{bucket_name}/{table_name}'

@data_exporter
def export_data(data, *args, **kwargs):

    data['lpep_pickup_date'] = data['lpep_pickup_datetime'].dt.date

    table = pa.Table.from_pandas(data)

    gcs = pa.fs.GcsFileSystem()

    pq.write_to_dataset(
        table = table,
        root_path = root_path,
        partition_cols = ['lpep_pickup_date'],
        filesystem = gcs
    )

```